upstreams:
  groups:
    default:
      # unencrypted DNS upstreams
      - 1.1.1.1
      # DNS over HTTPS upstreams
      - https://dns.google/dns-query
      - https://dns.nextdns.io
      # DNS over TLS upstreams
      - tcp-tls:dns.quad9.net
  # blocky will pick the 2 fastest upstreams but you can also use the `strict` strategy
  strategy: parallel_best
  timeout: 2s

# check if upstreams are working
startVerifyUpstream: true

# there's no IPv6 connectivity inside Docker networks
connectIPVersion: v4

# useful for self hosted services
customDNS:
  customTTL: 1h
  mapping:
    someservice.bayas.dev: 10.1.0.4

# useful for local network DNS resolution
conditional:
  mapping:
    lan: 10.1.0.1
    # for reverse DNS lookups of local devices
    0.1.10.in-addr.arpa: 10.1.0.1
    # for all unqualified hostnames
    .: 10.1.0.1

blocking:
  # I prefer the HaGeZi Light blocklist for set and forget setup, you can use any other blacklist nor whitelist you want
  # Blocky supports hosts, domains and regex syntax
  blackLists:
    ads:
      - https://raw.githubusercontent.com/hagezi/dns-blocklists/main/domains/light.txt
  clientGroupsBlock:
    default:
      - ads
  blockType: zeroIp
  blockTTL: 1m
  loading:
    refreshPeriod: 6h
    downloads:
      timeout: 60s
      attempts: 5
      cooldown: 10s
    concurrency: 16
    # start answering queries immediately after start
    strategy: fast
    maxErrorsPerSource: 5

caching:
  # enable prefetching improves performance for often used queries
  prefetching: true
  # if a domain is queried more than prefetchThreshold times, it will be prefetched for prefetchExpires time
  prefetchExpires: 24h
  prefetchThreshold: 2

# use encrypted DNS for resolving upstreams
# same syntax as normal upstreams
bootstrapDns:
  - https://8.8.8.8/dns-query